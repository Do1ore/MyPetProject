// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyPet.Models;

#nullable disable

namespace MyPet.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20230325134225_updateNewsAPISettings")]
    partial class updateNewsAPISettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyPet.Areas.Identity.Data.MyPetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MyPetUser");
                });

            modelBuilder.Entity("MyPet.Models.CartProduct", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductModelId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("MyPet.Models.ExtraImageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductModelId");

                    b.ToTable("ExtraImages");
                });

            modelBuilder.Entity("MyPet.Models.MainCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MyPet.Models.MainProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DefaultPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("MainFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MaxPrice")
                        .HasColumnType("float");

                    b.Property<double?>("MinPrice")
                        .HasColumnType("float");

                    b.Property<string>("ParsedUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductExtendedFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyPet.Models.NewsApiSettingsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domains")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageSize")
                        .HasColumnType("int");

                    b.Property<string>("SearchTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sourses")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NewsApiSettings");
                });

            modelBuilder.Entity("MyPet.Models.CartProduct", b =>
                {
                    b.HasOne("MyPet.Models.MainCart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyPet.Models.MainProductModel", "ProductModel")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductModelId");

                    b.Navigation("Cart");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("MyPet.Models.ExtraImageModel", b =>
                {
                    b.HasOne("MyPet.Models.MainProductModel", "ProductModel")
                        .WithMany("ExtraImage")
                        .HasForeignKey("ProductModelId");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("MyPet.Models.MainCart", b =>
                {
                    b.HasOne("MyPet.Areas.Identity.Data.MyPetUser", "User")
                        .WithOne("MainProductCart")
                        .HasForeignKey("MyPet.Models.MainCart", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyPet.Areas.Identity.Data.MyPetUser", b =>
                {
                    b.Navigation("MainProductCart")
                        .IsRequired();
                });

            modelBuilder.Entity("MyPet.Models.MainCart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("MyPet.Models.MainProductModel", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("ExtraImage");
                });
#pragma warning restore 612, 618
        }
    }
}
